# Copyright (c) 2016, Linaro Limited
# All rights reserved.
# SPDX-License-Identifier:     BSD-3-Clause
#
# Please update xxxx for your coverity token and notification email if required
# pushing to github/master will run make check
# pushing to github/coverity_scan will also launch a static analysis
# See https://scan.coverity.com/travis_ci

language: c
sudo: required
dist: trusty
group: deprecated-2017Q2
notifications:
  email: false
stages:
  - "build only"
  - test

addons:
        apt:
                packages:
                        - gcc
                        - clang-3.8
                        - automake autoconf libtool libssl-dev graphviz mscgen
                        - codespell
                        - libpcap-dev
                        - libnuma-dev
#        coverity_scan:
#                project:
#                        name: "$TRAVIS_REPO_SLUG"
#                        notification_email: xxxx
#                        build_command_prepend: "./bootstrap && ./configure --enable-test-cpp --enable-test-vald --enable-test-helper --enable-test-perf --enable-user-guides --enable-test-perf-proc --enable-test-example"
#                        build_command:   "make"
#                        branch_pattern: coverity_scan

cache:
        ccache: true
        pip: true
        directories:
                - dpdk
                - $HOME/cunit-install
                - $HOME/doxygen-install

env:
    global:
        #
        # By default Linaro CODECOV_TOKEN token is used. It's ok to use it to see
        # for individual commit validation. But you you want to track tests history
        # you need generated new one at https://codecov.io specific for your repo.
        - CODECOV_TOKEN=8e1c0fd8-62ff-411e-a79f-5839f6662c11
        - DPDK_VERS="17.08"
    matrix:
        - CONF=""
        - CONF="--disable-abi-compat"
        - CONF="--enable-deprecated"
        - CONF="--enable-schedule-sp"
        - CONF="--enable-schedule-iquery"
        - CONF="--disable-static-applications"

compiler:
        - gcc
        - clang-3.8

before_install:
#       Install cunit for the validation tests because distro version is too old and fails C99 compile
        - sudo apt-get remove libcunit1-dev libcunit1
        - export LD_LIBRARY_PATH="$HOME/cunit-install/$CROSS_ARCH/lib:$LD_LIBRARY_PATH"
        - |
          if [ ! -f "$HOME/cunit-install/$CROSS_ARCH/lib/libcunit.a" ]; then
            export CUNIT_VERSION=2.1-3
            curl -sSOL https://github.com/Linaro/libcunit/releases/download/${CUNIT_VERSION}/CUnit-${CUNIT_VERSION}.tar.bz2
            tar -jxf *.bz2
            pushd CUnit*
            libtoolize --force --copy
            aclocal
            autoheader
            automake --add-missing --include-deps --copy
            autoconf
            ./configure --prefix=$HOME/cunit-install/$CROSS_ARCH --enable-debug --enable-automated --enable-basic --enable-console --enable-examples --enable-test $CROSS || cat config.log
            make -j $(nproc)
            sudo make install
            popd
          fi
        - export PKG_CONFIG_PATH="$HOME/cunit-install/$CROSS_ARCH/lib/pkgconfig:${PKG_CONFIG_PATH}"
        - find $HOME/cunit-install

install:
        - sudo apt-get -qq update
        - sudo apt-get install linux-headers-`uname -r`
        - gem install asciidoctor

        # DPDK. Note that cache must be purged if dpdk version changes.
        - |
          CACHED_DPDK_VERS=`fgrep Version dpdk/pkg/dpdk.spec | cut -d " " -f 2`
          if [ "${CACHED_DPDK_VERS}" != "${DPDK_VERS}" ]; then
            rm -rf dpdk
          fi
        - TARGET="x86_64-native-linuxapp-gcc"
        - DPDK_MACHINE=snb
        - |
          if [ -n "$TARGET" -a ! -f "dpdk/${TARGET}/lib/libdpdk.a" ]; then
            git -c advice.detachedHead=false clone -q --depth=1 --single-branch --branch=v${DPDK_VERS} http://dpdk.org/git/dpdk dpdk
            pushd dpdk
            git log --oneline --decorate
            echo $CC
            make config T=${TARGET} O=${TARGET}
            pushd ${TARGET}
            sed -ri 's,(CONFIG_RTE_LIBRTE_PMD_PCAP=).*,\1y,' .config
            sed -ri 's,(CONFIG_RTE_LIBRTE_PMD_OPENSSL=).*,\1y,' .config
            cat .config |grep RTE_MACHINE
            if test -n "${DPDK_MACHINE}" ; then
              sed -ri 's,(CONFIG_RTE_MACHINE=).*,\1"'${DPDK_MACHINE}'",' .config
            fi
            popd
            make install T=${TARGET} EXTRA_CFLAGS="-fPIC $DPDK_CFLAGS"
            rm -r ./doc ./${TARGET}/app ./${TARGET}/build
            popd
            EXTRA_CONF="$EXTRA_CONF --with-dpdk-path=`pwd`/dpdk/${TARGET}"
          fi

script:
        - ./bootstrap
        - ./configure --prefix=$HOME/odp-install
          --with-dpdk-path=`pwd`/dpdk/${TARGET}
          --enable-user-guides
          --enable-debug=full
          --enable-helper-linux
          $CONF
        - make -j $(nproc)
        - sudo LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH" make check
        - make install

        # Wrapper-script.sh unmounts huge pages after make check
        - echo 1000 | sudo tee /proc/sys/vm/nr_hugepages
        - sudo mkdir -p /mnt/huge
        - sudo mount -t hugetlbfs nodev /mnt/huge

        - echo "Checking linking and run from install..."
        - pushd $HOME
        - echo "Dynamic link.."
        - ${CC} ${CFLAGS} ${OLDPWD}/example/hello/odp_hello.c -o odp_hello_inst_dynamic `PKG_CONFIG_PATH=${HOME}/odp-install/lib/pkgconfig:${PKG_CONFIG_PATH} pkg-config --cflags --libs libodp-dpdk`
        - sudo ODP_PLATFORM_PARAMS="-n 2" LD_LIBRARY_PATH="${HOME}/odp-install/lib:$LD_LIBRARY_PATH" ./odp_hello_inst_dynamic
        - echo "Static link.."
        - ${CC} ${CFLAGS} ${OLDPWD}/example/hello/odp_hello.c -o odp_hello_inst_static `PKG_CONFIG_PATH=${HOME}/odp-install/lib/pkgconfig:${PKG_CONFIG_PATH} pkg-config --cflags --libs libodp-dpdk --static` -static
        - sudo ODP_PLATFORM_PARAMS="-n 2" ./odp_hello_inst_static

jobs:
        include:
                - stage: test
                  env: TEST=coverage
                  compiler: gcc
                  script:
                          - sudo -H pip install coverage
                          - ./bootstrap
                          - ./configure --prefix=$HOME/odp-install
                            --enable-user-guides
                            --with-dpdk-path=`pwd`/dpdk/${TARGET}
                              CFLAGS="-O0 -coverage"
                              CXXFLAGS="-O0 -coverage" LDFLAGS="--coverage"
                            --enable-debug=full
                            --enable-helper-linux
                          - CCACHE_DISABLE=1 make -j $(nproc)
                          - sudo CCACHE_DISABLE=1 LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH" PATH=${PATH//:\.\/node_modules\/\.bin/} make check
                          - find . -type f -iname '*.[ch]' -not -path ".git/*" -execdir gcov {} \; ; bash <(curl -s https://codecov.io/bash) -X coveragepy
                - stage: "build only"
                  env: TEST=doxygen
                  compiler: gcc
                  before_install:
                          # Updated Doxygen
                        - |
                          if [ ! -f "$HOME/doxygen-install/bin/doxygen" ]; then
                                wget https://github.com/doxygen/doxygen/archive/Release_1_8_13.tar.gz
                                tar xpvf Release_1_8_13.tar.gz
                                pushd doxygen-Release_1_8_13
                                cmake -DCMAKE_INSTALL_PREFIX=$HOME/doxygen-install .
                                make -j $(nproc)
                                make install
                                popd
                          fi
                        - export PATH=$HOME/doxygen-install/bin:$PATH
                  script:
                          - ./bootstrap
                          - ./configure
                            --with-dpdk-path=`pwd`/dpdk/${TARGET}
                          # doxygen does not trap on warnings, check for them here.
                          - make doxygen-doc 2>&1 |tee doxygen.log
                          - |
                             fgrep -rq warning ./doxygen.log
                             if [ $? -eq 0 ]; then
                               false
                             else
                               true
                             fi
                - stage: "build only"
                  env: CONF=""
                  compiler: gcc
                  script:
                          - ./bootstrap
                          - ./configure --enable-helper-linux
                            --with-dpdk-path=`pwd`/dpdk/${TARGET}
                          - make -j $(nproc)
                - stage: "build only"
                  env: CONF=""
                  compiler: clang-3.8
                  script:
                          - ./bootstrap
                          - ./configure --enable-helper-linux
                            --with-dpdk-path=`pwd`/dpdk/${TARGET}
                          - make -j $(nproc)
                - stage: test
                  canfail: yes
                  env: TEST=checkpatch
                  compiler: gcc
                  install:
                          - true
                  script:
                          - echo ${TRAVIS_COMMIT_RANGE};
                          - ODP_PATCHES=`echo ${TRAVIS_COMMIT_RANGE} | sed 's/\.//'`;
                          - ./scripts/ci-checkpatches.sh ${ODP_PATCHES};
        allow_failures:
          - canfail: yes

after_failure:
  - cat config.log
  - find . -name "*.trs" | xargs grep -l '^.test-result. FAIL' | while read trs ; do echo FAILURE detected at $trs; cat ${trs%%.trs}.log ; done
